// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: currencygrpc/currency.proto

package currencygrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConverterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountryCode   *string                `protobuf:"bytes,1,req,name=CountryCode" json:"CountryCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConverterRequest) Reset() {
	*x = ConverterRequest{}
	mi := &file_currencygrpc_currency_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConverterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverterRequest) ProtoMessage() {}

func (x *ConverterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currencygrpc_currency_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverterRequest.ProtoReflect.Descriptor instead.
func (*ConverterRequest) Descriptor() ([]byte, []int) {
	return file_currencygrpc_currency_proto_rawDescGZIP(), []int{0}
}

func (x *ConverterRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

type ConverterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrencyName  *string                `protobuf:"bytes,1,req,name=CurrencyName" json:"CurrencyName,omitempty"`
	CountryCode   *string                `protobuf:"bytes,2,req,name=CountryCode" json:"CountryCode,omitempty"`
	Base          *string                `protobuf:"bytes,3,req,name=Base" json:"Base,omitempty"`
	Amount        *float32               `protobuf:"fixed32,4,req,name=Amount" json:"Amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConverterResponse) Reset() {
	*x = ConverterResponse{}
	mi := &file_currencygrpc_currency_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConverterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverterResponse) ProtoMessage() {}

func (x *ConverterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currencygrpc_currency_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverterResponse.ProtoReflect.Descriptor instead.
func (*ConverterResponse) Descriptor() ([]byte, []int) {
	return file_currencygrpc_currency_proto_rawDescGZIP(), []int{1}
}

func (x *ConverterResponse) GetCurrencyName() string {
	if x != nil && x.CurrencyName != nil {
		return *x.CurrencyName
	}
	return ""
}

func (x *ConverterResponse) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ConverterResponse) GetBase() string {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return ""
}

func (x *ConverterResponse) GetAmount() float32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

var File_currencygrpc_currency_proto protoreflect.FileDescriptor

const file_currencygrpc_currency_proto_rawDesc = "" +
	"\n" +
	"\x1bcurrencygrpc/currency.proto\"4\n" +
	"\x10ConverterRequest\x12 \n" +
	"\vCountryCode\x18\x01 \x02(\tR\vCountryCode\"\x85\x01\n" +
	"\x11ConverterResponse\x12\"\n" +
	"\fCurrencyName\x18\x01 \x02(\tR\fCurrencyName\x12 \n" +
	"\vCountryCode\x18\x02 \x02(\tR\vCountryCode\x12\x12\n" +
	"\x04Base\x18\x03 \x02(\tR\x04Base\x12\x16\n" +
	"\x06Amount\x18\x04 \x02(\x02R\x06Amount2@\n" +
	"\bCurrency\x124\n" +
	"\tConverter\x12\x11.ConverterRequest\x1a\x12.ConverterResponse\"\x00B(Z&github.com/erickrodriguez/currencygrpc"

var (
	file_currencygrpc_currency_proto_rawDescOnce sync.Once
	file_currencygrpc_currency_proto_rawDescData []byte
)

func file_currencygrpc_currency_proto_rawDescGZIP() []byte {
	file_currencygrpc_currency_proto_rawDescOnce.Do(func() {
		file_currencygrpc_currency_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_currencygrpc_currency_proto_rawDesc), len(file_currencygrpc_currency_proto_rawDesc)))
	})
	return file_currencygrpc_currency_proto_rawDescData
}

var file_currencygrpc_currency_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_currencygrpc_currency_proto_goTypes = []any{
	(*ConverterRequest)(nil),  // 0: ConverterRequest
	(*ConverterResponse)(nil), // 1: ConverterResponse
}
var file_currencygrpc_currency_proto_depIdxs = []int32{
	0, // 0: Currency.Converter:input_type -> ConverterRequest
	1, // 1: Currency.Converter:output_type -> ConverterResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_currencygrpc_currency_proto_init() }
func file_currencygrpc_currency_proto_init() {
	if File_currencygrpc_currency_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_currencygrpc_currency_proto_rawDesc), len(file_currencygrpc_currency_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_currencygrpc_currency_proto_goTypes,
		DependencyIndexes: file_currencygrpc_currency_proto_depIdxs,
		MessageInfos:      file_currencygrpc_currency_proto_msgTypes,
	}.Build()
	File_currencygrpc_currency_proto = out.File
	file_currencygrpc_currency_proto_goTypes = nil
	file_currencygrpc_currency_proto_depIdxs = nil
}
