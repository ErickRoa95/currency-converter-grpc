// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock/repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/erickrodriguez/currencygrpc/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockICurrencyRepo is a mock of ICurrencyRepo interface.
type MockICurrencyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICurrencyRepoMockRecorder
	isgomock struct{}
}

// MockICurrencyRepoMockRecorder is the mock recorder for MockICurrencyRepo.
type MockICurrencyRepoMockRecorder struct {
	mock *MockICurrencyRepo
}

// NewMockICurrencyRepo creates a new mock instance.
func NewMockICurrencyRepo(ctrl *gomock.Controller) *MockICurrencyRepo {
	mock := &MockICurrencyRepo{ctrl: ctrl}
	mock.recorder = &MockICurrencyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICurrencyRepo) EXPECT() *MockICurrencyRepoMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockICurrencyRepo) Search(arg0 string) (model.Currency, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockICurrencyRepoMockRecorder) Search(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockICurrencyRepo)(nil).Search), arg0)
}
